<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: proto.proto
//   Date: 2014-08-18 11:27:39

namespace Riemann {

  class State extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $time = null;
    
    /**  @var string */
    public $state = null;
    
    /**  @var string */
    public $service = null;
    
    /**  @var string */
    public $host = null;
    
    /**  @var string */
    public $description = null;
    
    /**  @var boolean */
    public $once = null;
    
    /**  @var string[]  */
    public $tags = array();
    
    /**  @var float */
    public $ttl = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.State');

      // OPTIONAL INT64 time = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING state = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING service = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "service";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING host = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "host";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING description = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL once = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "once";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING tags = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "tags";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL FLOAT ttl = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "ttl";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(1);
    }
    
    /**
     * Clear <time> value
     *
     * @return \State
     */
    public function clearTime(){
      return $this->_clear(1);
    }
    
    /**
     * Get <time> value
     *
     * @return int
     */
    public function getTime(){
      return $this->_get(1);
    }
    
    /**
     * Set <time> value
     *
     * @param int $value
     * @return \State
     */
    public function setTime( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(2);
    }
    
    /**
     * Clear <state> value
     *
     * @return \State
     */
    public function clearState(){
      return $this->_clear(2);
    }
    
    /**
     * Get <state> value
     *
     * @return string
     */
    public function getState(){
      return $this->_get(2);
    }
    
    /**
     * Set <state> value
     *
     * @param string $value
     * @return \State
     */
    public function setState( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <service> has a value
     *
     * @return boolean
     */
    public function hasService(){
      return $this->_has(3);
    }
    
    /**
     * Clear <service> value
     *
     * @return \State
     */
    public function clearService(){
      return $this->_clear(3);
    }
    
    /**
     * Get <service> value
     *
     * @return string
     */
    public function getService(){
      return $this->_get(3);
    }
    
    /**
     * Set <service> value
     *
     * @param string $value
     * @return \State
     */
    public function setService( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <host> has a value
     *
     * @return boolean
     */
    public function hasHost(){
      return $this->_has(4);
    }
    
    /**
     * Clear <host> value
     *
     * @return \State
     */
    public function clearHost(){
      return $this->_clear(4);
    }
    
    /**
     * Get <host> value
     *
     * @return string
     */
    public function getHost(){
      return $this->_get(4);
    }
    
    /**
     * Set <host> value
     *
     * @param string $value
     * @return \State
     */
    public function setHost( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(5);
    }
    
    /**
     * Clear <description> value
     *
     * @return \State
     */
    public function clearDescription(){
      return $this->_clear(5);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(5);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \State
     */
    public function setDescription( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <once> has a value
     *
     * @return boolean
     */
    public function hasOnce(){
      return $this->_has(6);
    }
    
    /**
     * Clear <once> value
     *
     * @return \State
     */
    public function clearOnce(){
      return $this->_clear(6);
    }
    
    /**
     * Get <once> value
     *
     * @return boolean
     */
    public function getOnce(){
      return $this->_get(6);
    }
    
    /**
     * Set <once> value
     *
     * @param boolean $value
     * @return \State
     */
    public function setOnce( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <tags> has a value
     *
     * @return boolean
     */
    public function hasTags(){
      return $this->_has(7);
    }
    
    /**
     * Clear <tags> value
     *
     * @return \State
     */
    public function clearTags(){
      return $this->_clear(7);
    }
    
    /**
     * Get <tags> value
     *
     * @param int $idx
     * @return string
     */
    public function getTags($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <tags> value
     *
     * @param string $value
     * @return \State
     */
    public function setTags( $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <tags>
     *
     * @return string[]
     */
    public function getTagsList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <tags>
     *
     * @param string $value
     * @return \State
     */
    public function addTags( $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <ttl> has a value
     *
     * @return boolean
     */
    public function hasTtl(){
      return $this->_has(8);
    }
    
    /**
     * Clear <ttl> value
     *
     * @return \State
     */
    public function clearTtl(){
      return $this->_clear(8);
    }
    
    /**
     * Get <ttl> value
     *
     * @return float
     */
    public function getTtl(){
      return $this->_get(8);
    }
    
    /**
     * Set <ttl> value
     *
     * @param float $value
     * @return \State
     */
    public function setTtl( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace Riemann {

  class Event extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $time = null;
    
    /**  @var string */
    public $state = null;
    
    /**  @var string */
    public $service = null;
    
    /**  @var string */
    public $host = null;
    
    /**  @var string */
    public $description = null;
    
    /**  @var string[]  */
    public $tags = array();
    
    /**  @var float */
    public $ttl = null;
    
    /**  @var \Attribute[]  */
    public $attributes = array();
    
    /**  @var int */
    public $metric_sint64 = null;
    
    /**  @var float */
    public $metric_d = null;
    
    /**  @var float */
    public $metric_f = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.Event');

      // OPTIONAL INT64 time = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "time";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING state = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING service = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "service";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING host = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "host";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING description = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING tags = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "tags";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL FLOAT ttl = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "ttl";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE attributes = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "attributes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Attribute';
      $descriptor->addField($f);

      // OPTIONAL SINT64 metric_sint64 = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "metric_sint64";
      $f->type      = \DrSlump\Protobuf::TYPE_SINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE metric_d = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "metric_d";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT metric_f = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "metric_f";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <time> has a value
     *
     * @return boolean
     */
    public function hasTime(){
      return $this->_has(1);
    }
    
    /**
     * Clear <time> value
     *
     * @return \Event
     */
    public function clearTime(){
      return $this->_clear(1);
    }
    
    /**
     * Get <time> value
     *
     * @return int
     */
    public function getTime(){
      return $this->_get(1);
    }
    
    /**
     * Set <time> value
     *
     * @param int $value
     * @return \Event
     */
    public function setTime( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(2);
    }
    
    /**
     * Clear <state> value
     *
     * @return \Event
     */
    public function clearState(){
      return $this->_clear(2);
    }
    
    /**
     * Get <state> value
     *
     * @return string
     */
    public function getState(){
      return $this->_get(2);
    }
    
    /**
     * Set <state> value
     *
     * @param string $value
     * @return \Event
     */
    public function setState( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <service> has a value
     *
     * @return boolean
     */
    public function hasService(){
      return $this->_has(3);
    }
    
    /**
     * Clear <service> value
     *
     * @return \Event
     */
    public function clearService(){
      return $this->_clear(3);
    }
    
    /**
     * Get <service> value
     *
     * @return string
     */
    public function getService(){
      return $this->_get(3);
    }
    
    /**
     * Set <service> value
     *
     * @param string $value
     * @return \Event
     */
    public function setService( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <host> has a value
     *
     * @return boolean
     */
    public function hasHost(){
      return $this->_has(4);
    }
    
    /**
     * Clear <host> value
     *
     * @return \Event
     */
    public function clearHost(){
      return $this->_clear(4);
    }
    
    /**
     * Get <host> value
     *
     * @return string
     */
    public function getHost(){
      return $this->_get(4);
    }
    
    /**
     * Set <host> value
     *
     * @param string $value
     * @return \Event
     */
    public function setHost( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(5);
    }
    
    /**
     * Clear <description> value
     *
     * @return \Event
     */
    public function clearDescription(){
      return $this->_clear(5);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(5);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \Event
     */
    public function setDescription( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <tags> has a value
     *
     * @return boolean
     */
    public function hasTags(){
      return $this->_has(7);
    }
    
    /**
     * Clear <tags> value
     *
     * @return \Event
     */
    public function clearTags(){
      return $this->_clear(7);
    }
    
    /**
     * Get <tags> value
     *
     * @param int $idx
     * @return string
     */
    public function getTags($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <tags> value
     *
     * @param string $value
     * @return \Event
     */
    public function setTags( $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <tags>
     *
     * @return string[]
     */
    public function getTagsList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <tags>
     *
     * @param string $value
     * @return \Event
     */
    public function addTags( $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <ttl> has a value
     *
     * @return boolean
     */
    public function hasTtl(){
      return $this->_has(8);
    }
    
    /**
     * Clear <ttl> value
     *
     * @return \Event
     */
    public function clearTtl(){
      return $this->_clear(8);
    }
    
    /**
     * Get <ttl> value
     *
     * @return float
     */
    public function getTtl(){
      return $this->_get(8);
    }
    
    /**
     * Set <ttl> value
     *
     * @param float $value
     * @return \Event
     */
    public function setTtl( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <attributes> has a value
     *
     * @return boolean
     */
    public function hasAttributes(){
      return $this->_has(9);
    }
    
    /**
     * Clear <attributes> value
     *
     * @return \Event
     */
    public function clearAttributes(){
      return $this->_clear(9);
    }
    
    /**
     * Get <attributes> value
     *
     * @param int $idx
     * @return \Attribute
     */
    public function getAttributes($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <attributes> value
     *
     * @param \Attribute $value
     * @return \Event
     */
    public function setAttributes(\Attribute $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <attributes>
     *
     * @return \Attribute[]
     */
    public function getAttributesList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <attributes>
     *
     * @param \Attribute $value
     * @return \Event
     */
    public function addAttributes(\Attribute $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <metric_sint64> has a value
     *
     * @return boolean
     */
    public function hasMetricSint64(){
      return $this->_has(13);
    }
    
    /**
     * Clear <metric_sint64> value
     *
     * @return \Event
     */
    public function clearMetricSint64(){
      return $this->_clear(13);
    }
    
    /**
     * Get <metric_sint64> value
     *
     * @return int
     */
    public function getMetricSint64(){
      return $this->_get(13);
    }
    
    /**
     * Set <metric_sint64> value
     *
     * @param int $value
     * @return \Event
     */
    public function setMetricSint64( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <metric_d> has a value
     *
     * @return boolean
     */
    public function hasMetricD(){
      return $this->_has(14);
    }
    
    /**
     * Clear <metric_d> value
     *
     * @return \Event
     */
    public function clearMetricD(){
      return $this->_clear(14);
    }
    
    /**
     * Get <metric_d> value
     *
     * @return float
     */
    public function getMetricD(){
      return $this->_get(14);
    }
    
    /**
     * Set <metric_d> value
     *
     * @param float $value
     * @return \Event
     */
    public function setMetricD( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <metric_f> has a value
     *
     * @return boolean
     */
    public function hasMetricF(){
      return $this->_has(15);
    }
    
    /**
     * Clear <metric_f> value
     *
     * @return \Event
     */
    public function clearMetricF(){
      return $this->_clear(15);
    }
    
    /**
     * Get <metric_f> value
     *
     * @return float
     */
    public function getMetricF(){
      return $this->_get(15);
    }
    
    /**
     * Set <metric_f> value
     *
     * @param float $value
     * @return \Event
     */
    public function setMetricF( $value){
      return $this->_set(15, $value);
    }
  }
}

namespace Riemann {

  class Query extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $string = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.Query');

      // OPTIONAL STRING string = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "string";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <string> has a value
     *
     * @return boolean
     */
    public function hasString(){
      return $this->_has(1);
    }
    
    /**
     * Clear <string> value
     *
     * @return \Query
     */
    public function clearString(){
      return $this->_clear(1);
    }
    
    /**
     * Get <string> value
     *
     * @return string
     */
    public function getString(){
      return $this->_get(1);
    }
    
    /**
     * Set <string> value
     *
     * @param string $value
     * @return \Query
     */
    public function setString( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace Riemann {

  class Msg extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $ok = null;
    
    /**  @var string */
    public $error = null;
    
    /**  @var \State[]  */
    public $states = array();
    
    /**  @var \Query */
    public $query = null;
    
    /**  @var \Event[]  */
    public $events = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.Msg');

      // OPTIONAL BOOL ok = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "ok";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING error = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "error";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE states = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "states";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\State';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE query = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "query";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Query';
      $descriptor->addField($f);

      // REPEATED MESSAGE events = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "events";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Event';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <ok> has a value
     *
     * @return boolean
     */
    public function hasOk(){
      return $this->_has(2);
    }
    
    /**
     * Clear <ok> value
     *
     * @return \Msg
     */
    public function clearOk(){
      return $this->_clear(2);
    }
    
    /**
     * Get <ok> value
     *
     * @return boolean
     */
    public function getOk(){
      return $this->_get(2);
    }
    
    /**
     * Set <ok> value
     *
     * @param boolean $value
     * @return \Msg
     */
    public function setOk( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <error> has a value
     *
     * @return boolean
     */
    public function hasError(){
      return $this->_has(3);
    }
    
    /**
     * Clear <error> value
     *
     * @return \Msg
     */
    public function clearError(){
      return $this->_clear(3);
    }
    
    /**
     * Get <error> value
     *
     * @return string
     */
    public function getError(){
      return $this->_get(3);
    }
    
    /**
     * Set <error> value
     *
     * @param string $value
     * @return \Msg
     */
    public function setError( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <states> has a value
     *
     * @return boolean
     */
    public function hasStates(){
      return $this->_has(4);
    }
    
    /**
     * Clear <states> value
     *
     * @return \Msg
     */
    public function clearStates(){
      return $this->_clear(4);
    }
    
    /**
     * Get <states> value
     *
     * @param int $idx
     * @return \State
     */
    public function getStates($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <states> value
     *
     * @param \State $value
     * @return \Msg
     */
    public function setStates(\State $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <states>
     *
     * @return \State[]
     */
    public function getStatesList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <states>
     *
     * @param \State $value
     * @return \Msg
     */
    public function addStates(\State $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <query> has a value
     *
     * @return boolean
     */
    public function hasQuery(){
      return $this->_has(5);
    }
    
    /**
     * Clear <query> value
     *
     * @return \Msg
     */
    public function clearQuery(){
      return $this->_clear(5);
    }
    
    /**
     * Get <query> value
     *
     * @return \Query
     */
    public function getQuery(){
      return $this->_get(5);
    }
    
    /**
     * Set <query> value
     *
     * @param \Query $value
     * @return \Msg
     */
    public function setQuery(\Query $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <events> has a value
     *
     * @return boolean
     */
    public function hasEvents(){
      return $this->_has(6);
    }
    
    /**
     * Clear <events> value
     *
     * @return \Msg
     */
    public function clearEvents(){
      return $this->_clear(6);
    }
    
    /**
     * Get <events> value
     *
     * @param int $idx
     * @return \Event
     */
    public function getEvents($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <events> value
     *
     * @param \Event $value
     * @return \Msg
     */
    public function setEvents(\Event $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <events>
     *
     * @return \Event[]
     */
    public function getEventsList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <events>
     *
     * @param \Event $value
     * @return \Msg
     */
    public function addEvents(\Event $value){
     return $this->_add(6, $value);
    }
  }
}

namespace Riemann {

  class Attribute extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.Attribute');

      // REQUIRED STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \Attribute
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \Attribute
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \Attribute
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \Attribute
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

